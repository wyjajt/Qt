/* soapitoaProxy.cpp
   Generated by gSOAP 2.8.67 for itoa.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapitoaProxy.h"

SOAP_NMAC struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns2", "urn:itoa", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };


itoaProxy::itoaProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	itoaProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

itoaProxy::itoaProxy(const itoaProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

itoaProxy::itoaProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	itoaProxy_init(_soap->imode, _soap->omode);
}

itoaProxy::itoaProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	itoaProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

itoaProxy::itoaProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	itoaProxy_init(iomode, iomode);
}

itoaProxy::itoaProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	itoaProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

itoaProxy::itoaProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	itoaProxy_init(imode, omode);
}

itoaProxy::~itoaProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void itoaProxy::itoaProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
//    static const struct Namespace namespaces[] = {
//        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
//        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
//        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
//        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
//        {"ns2", "urn:itoa", NULL, NULL},
//        {NULL, NULL, NULL, NULL}
//    };
    soap_set_namespaces(this->soap, namespaces);
}

itoaProxy *itoaProxy::copy()
{	itoaProxy *dup = SOAP_NEW_UNMANAGED(itoaProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

itoaProxy& itoaProxy::operator=(const itoaProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void itoaProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void itoaProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	itoaProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void itoaProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *itoaProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *itoaProxy::soap_fault()
{	return this->soap->fault;
}

const char *itoaProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *itoaProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int itoaProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int itoaProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void itoaProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void itoaProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *itoaProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int itoaProxy::itoa(const char *endpoint, const char *soap_action, int i, std::string &a)
{
	struct ns2__itoa soap_tmp_ns2__itoa;
	struct ns2__itoaResponse *soap_tmp_ns2__itoaResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8087";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns2__itoa.i = i;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__itoa(soap, &soap_tmp_ns2__itoa);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__itoa(soap, &soap_tmp_ns2__itoa, "ns2:itoa", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__itoa(soap, &soap_tmp_ns2__itoa, "ns2:itoa", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<std::string*>(&a)) // NULL ref?
		return soap_closesock(soap);
	soap_default_std__string(soap, &a);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns2__itoaResponse = soap_get_ns2__itoaResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns2__itoaResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	a = soap_tmp_ns2__itoaResponse->a;
	return soap_closesock(soap);
}

int itoaProxy::add(const char *endpoint, const char *soap_action, double a, double b, double &result)
{
	struct ns2__add soap_tmp_ns2__add;
	struct ns2__addResponse *soap_tmp_ns2__addResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8087";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns2__add.a = a;
	soap_tmp_ns2__add.b = b;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__add(soap, &soap_tmp_ns2__add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<double*>(&result)) // NULL ref?
		return soap_closesock(soap);
	soap_default_double(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns2__addResponse = soap_get_ns2__addResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns2__addResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns2__addResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
